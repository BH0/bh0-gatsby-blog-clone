webpackJsonp([0xa9f71590c5fb],{363:function(e,t){e.exports={data:{markdownRemark:{html:'<hr>\n<p>path: "/an-implication-of-the-important-css-rule"\ntitle: "An Implication of the !Important CSS Rule"\npublished: true\ndate: "18-08-2018" </p>\n<hr>\n<h1>An Implication of the "!important" CSS Rule</h1>\n<p>This CSS rule is a rule I rarely use - and I am thankful I rarely use it due to the implication I am about to tell you about. </p>\n<!-- more --> \n<p>The CSS "color: red !important;" rule means that the important style will be applied no matter what - and will overrule any contradicting CSS. The rule is a powerful rule that should be used sparingly. </p>\n<h1>Get To The Point!</h1>\n<p>If a developer has used this rule a lot in their CSS, chances are, they were not quite sure as to what they were doing at the time - for example, they were incapable [or too lazy to] find the appropriate CSS for the element they wished to target, so opted just to overrule the unfound CSS. </p>\n<h1>I Know From Personal Experience</h1>\n<p>The first time I had ever used the "!important" rule was when I was using the Materialize CSS framework, I had made a form - and Materialize styles forms by default - while I do like the design of the default Materialize form,  It was not was I wanted, as the design did not fit the design of my website. </p>\n<p>So obviously, I had to customize the form, I was not very familiar with CSS frameworks at this time, so I did not want to touch the Materialize source code myself, and despite inspecting the form\'s elements thoroughly using the browser\'s developer tools - I was unable to find the correct element to target. As a [hacky] workaround, I decided just to litter that page\'s CSS with the "!important" tag in an attempt to overrule Materialize\'s default styling. </p>',frontmatter:{path:"/an-implication-of-the-important-css-rule",title:"An Implication of the !Important CSS Rule"}}},pathContext:{}}}});
//# sourceMappingURL=path---an-implication-of-the-important-css-rule-caec0d6fca50d1536e02.js.map